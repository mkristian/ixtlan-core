h1. Ixtlan

p. this project is just a compilation of things I am doing all over the place in my projects. there is a focus on privacy protection which needs a strong security in the first place.

p. this gem is quite invasive in terms of default templates of rails3. first it adds json serializers and looks for a lot of switches from other gems like 'ixtlan-audit', 'ixtlan-session-timeout', 'ixtlan-error-handler', 'rails-resty-generators', etc

h2. setup generator

p. this just adds an preinitializer to the rails application which allows to keep the config/database.yml almost as is and allows to put the passwords for the production database into a 'production.yml' - just ignore that production.yml from git and keep it only on the deployed server. same you can do for an external mail provider.

p. further if you can configure a configuration (singleton) model which allows to register components which can notified when a configuration changes.

p. since the model generator also needs to work nice with rails-resty-generators it add beside the "reference/belongs_to" also a "has_one" and "has_many" types. this allows to generate the ruby models along with java GWT models in a similar manner (note: restrictions and short comings are there . . .).

h2. cache headers

p. that is the only "real" feature of the ixtlan-core gem. with this you can control the cache header with three predefined modi:

* private: no caching of data for any proxy or browser

* protected: only browser can cache

* public: proxies and browsers can cache as desired

of any sensitive data go for the private mode.

p. this control is only active when there is logged in user, i.e. controller.current_user != null. also when the controller does not set the cache-header the rails default is used.

h3. credits

p. the cache header uses http://code.google.com/p/doctype/wiki/ArticleHttpCaching as specification
